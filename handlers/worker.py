from bot import *
from aiogram.dispatcher.filters import Text
from aiogram import types
from markups import *
from handlers import states
from config import price, worker_percent


@dp.message_handler(commands=['worker'])
async def cmd_worker(message: types.Message):
    if not db.worker_exists(message.from_user.id):
        pass
    else:
        await message.answer('<i><b>–ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞</b></i>', reply_markup=worker_kb)

@dp.message_handler(lambda msg: msg.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def cmd_worker_profile(message: types.Message):
    if not db.worker_exists(message.from_user.id):
        pass
    else:
        data = db.worker_stats(message.from_user.id)
        await message.answer(f'üì± –ü—Ä–æ—Ñ–∏–ª—å:\n'
                             f'üí∞ –ë–∞–ª–∞–Ω—Å –≤–æ—Ä–∫–µ—Ä–∞: {data[1]} —Ä—É–±', reply_markup=keyboard_withdr)

@dp.message_handler(lambda msg: msg.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã')
async def my_orders(message: types.Message):
    if not db.worker_exists(message.from_user.id):
        pass
    else:
        data = db.worker_orders(message.from_user.id)
        await message.answer('–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:', reply_markup=worker_orders(data))

@dp.message_handler(lambda msg: msg.text == '–í–∑—è—Ç—å –∑–∞–∫–∞–∑')
async def get_order(message: types.Message):
    if not db.worker_exists(message.from_user.id):
        pass
    else:
        data = db.orders()
        await message.answer('–ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–∫–∞–∑—ã:',
                             reply_markup=orders_kb(data))

@dp.callback_query_handler(Text(startswith='order_'))
async def order_info(callback: types.CallbackQuery):
    id_ = callback.data.split('_')[1]
    data = db.get_order_info(id_)
    await callback.message.edit_text(f'<b>–ó–∞—è–≤–∫–∞ –æ—Ç @{data[2]}</b>\n\n'
                                     f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: <b>{data[3]}</b>',
                                     reply_markup=order_worker(data[1], data[0]))

@dp.callback_query_handler(Text(startswith='accwork_'))
async def cmd_accept(callback: types.CallbackQuery):
    user_id = callback.data.split('_')[1]
    id_ = callback.data.split('_')[2]
    data = db.get_order_info(id_)
    db.set_order_to_worker(callback.from_user.id, user_id, id_, data[3])
    db.delete_order(id_)
    await callback.message.edit_text('<b>–ó–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç!</b>')

@dp.callback_query_handler(lambda c: c.data == 'backwork')
async def back_cmd(callback: types.CallbackQuery):
    data = db.orders()
    await callback.message.edit_text('–ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–∫–∞–∑—ã:',
                         reply_markup=orders_kb(data))


@dp.callback_query_handler(Text(startswith='worker_'))
async def order_info(callback: types.CallbackQuery):
    id_ = callback.data.split('_')[1]
    data = db.get_accepted_order(id_)
    await callback.message.edit_text(f'üìÑ –ó–∞–∫–∞–∑ #{id_}\n\n'
                                     f'üë§ –ó–∞–∫–∞–∑—á–∏–∫: {data[1]}\n'
                                     f'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {data[3]}', reply_markup=seo(data[1], id_))

@dp.callback_query_handler(Text(startswith='seodone_'))
async def seo_done_cmd(callback: types.CallbackQuery):
    user_id = callback.data.split('_')[1]
    id_ = callback.data.split('_')[2]
    data = db.get_accepted_order(id_)
    db.add_worker_balance(callback.from_user.id, price/100*worker_percent)
    await callback.message.edit_text('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É')
    await bot.send_message(user_id, f'<b>‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ SEO –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n'
                                    f'<b>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {data[3]}</b>')
    db.delete_accepted_order(id_)

@dp.callback_query_handler(Text(startswith='seonotdone_'))
async def seo_done_cmd(callback: types.CallbackQuery):
    user_id = callback.data.split('_')[1]
    id_ = callback.data.split('_')[2]
    data = db.get_accepted_order(id_)
    await callback.message.edit_text('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É')
    await bot.send_message(user_id, f'<b>‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ SEO –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>\n'
                                    f'<b>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {data[3]}</b>\n'
                                    f'<b>–î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å</b>')
    db.delete_accepted_order(id_)
    db.add_balance(user_id, price)

@dp.callback_query_handler(lambda c: c.data == 'withdraw')
async def withdraw_btn(callback: types.CallbackQuery):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ —Å–≤–æ–µ–≥–æ LOLZTEAM-–∞–∫–∫–∞—É–Ω—Ç–∞:\n\n'
                                     '<b>–ï—Å–ª–∏ –≤—ã —É–∫–∞–∂–∏—Ç–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫, —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ—Ç–µ—Ä—è–Ω—ã!</b>')
    await states.WorkerStates.withdraw_bal.set()