from bot import *
from aiogram.dispatcher import FSMContext
from aiogram import types
from config import admin_ids
from markups import admin_kb, choice_rass_kb
from handlers import states
from aiogram.dispatcher.filters import Text

@dp.message_handler(commands=['admin'])
async def admin_cmd(message: types.Message):
    if message.from_user.id not in admin_ids:
        pass
    else:
        await message.answer('<i><b>–ê–¥–º–∏–Ω-–º–µ–Ω—é</b></i>', reply_markup=admin_kb)

@dp.message_handler(lambda msg: msg.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def cmd_stats(message: types.Message):
    users = db.all_users()[0][0]
    await message.answer(f'<b>üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n'
                         f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}')

@dp.message_handler(lambda msg: msg.text == 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def search_cmd(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    await states.AdminStates.search_user.set()

@dp.callback_query_handler(Text(startswith='block_'))
async def block_user(callback: types.CallbackQuery):
    user_id = callback.data.split('_')[1]
    db.block_user(user_id)
    await callback.message.edit_text('–Æ–∑–µ—Ä –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω')

@dp.callback_query_handler(Text(startswith='bal_'))
async def set_balance(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.data.split('_')[1]
    await state.update_data(
        {
            'user_id': user_id
        }
    )
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n'
                                     '(–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞, –ø—Ä–∏–ø–∏—à–∏—Ç–µ - –∫ —Å—É–º–º–µ)')
    await states.AdminStates.set_bal.set()

@dp.message_handler(lambda msg: msg.text == 'üë§ –î–æ–±–∞–≤–∏—Ç—å –≤–æ—Ä–∫–µ—Ä–∞')
async def add_worker(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ User-id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    await states.AdminStates.set_worker.set()

@dp.message_handler(lambda msg: msg.text == 'üë§ –£–¥–∞–ª–∏—Ç—å –≤–æ—Ä–∫–µ—Ä–∞')
async def add_worker(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ User-id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    await states.AdminStates.del_worker.set()

@dp.message_handler(lambda msg: msg.text == 'üì© –†–∞—Å—Å—ã–ª–∫–∞')
async def rass_cmd(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=choice_rass_kb)

@dp.callback_query_handler(lambda c: c.data == 'without_pic')
async def without_pic(callback: types.CallbackQuery):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await states.AdminStates.without_pic.set()

@dp.callback_query_handler(lambda c: c.data == 'with_pic')
async def without_pic(callback: types.CallbackQuery):
    await callback.message.edit_text('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É:\n\n'
                                     '(–ü–ö–ú –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ -> –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL –∫–∞—Ä—Ç–∏–Ω–∫–∏)')
    await states.AdminStates.with_pic_step1.set()

@dp.message_handler(lambda msg: msg.text == 'üéü –ü—Ä–æ–º–æ–∫–æ–¥')
async def add_promo(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:')
    await states.AdminStates.set_name_promo.set()
