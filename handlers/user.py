import sqlite3
from aiogram.dispatcher.filters import Text
from aiogram import types
from bot import *
from config import price
from markups import *
from payments import cp
from handlers import states

@dp.message_handler(lambda msg: msg.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def cmd_profile(message: types.Message):
    data = db.stats(message.from_user.id)
    if data[5] == 1:
        await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        await message.answer(f'üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n'
                            f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                            f'üîë ID: {message.from_user.id}\n'
                            f'üë§ –õ–æ–≥–∏–Ω: @{message.from_user.username}\n\n'
                            f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                            f'üí≥ –ë–∞–ª–∞–Ω—Å: {data[2]} —Ä—É–±\n'
                            f'üíµ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—É–º–º—É: {data[3]} —Ä—É–±\n'
                            f'üéÅ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {data[4]} —à—Ç.', reply_markup=profile_inline)

@dp.message_handler(lambda msg: msg.text == 'üî∫ –ù–∞–∫—Ä—É—Ç–∫–∞ SEO')
async def seo_up(message: types.Message):
    data = db.stats(message.from_user.id)
    if data[5] == 1:
        await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        await message.answer(f'–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–∫—Ä—É—Ç–∫–∏ - {price} —Ä—É–±–ª–µ–π\n'
                             '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å SEO:\n\n'
                            '‚ùóÔ∏è <b>–í–∞–∂–Ω–æ - –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ª–∏—Ç–æ –Ω–µ –±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥ –∏ –∏–º–µ—Ç—å SEO –æ—Ç 50</b>')
        await states.UserStates.set_link.set()

@dp.callback_query_handler(lambda c: c.data == 'up_bal')
async def up_balance(callback: types.CallbackQuery):
    data = db.stats(callback.from_user.id)
    if data[5] == 1:
        await callback.message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥:', reply_markup=payments_kb)

@dp.callback_query_handler(lambda c: c.data == 'back')
async def back_cmd(callback: types.CallbackQuery):
    data = db.stats(callback.from_user.id)
    if data[5] == 1:
        await callback.message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        data = db.stats(callback.from_user.id)
        await callback.message.edit_text(f'üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n'
                                     f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                     f'üîë ID: {callback.from_user.id}\n'
                                     f'üë§ –õ–æ–≥–∏–Ω: @{callback.from_user.username}\n\n'
                                     f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                     f'üí≥ –ë–∞–ª–∞–Ω—Å: {data[2]} —Ä—É–±\n'
                                     f'üíµ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—É–º–º—É: {data[3]} —Ä—É–±\n'
                                     f'üéÅ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {data[4]} —à—Ç.', reply_markup=profile_inline)

@dp.callback_query_handler(lambda c: c.data == 'crypto')
async def invoice(callback: types.CallbackQuery):
    data = db.stats(callback.from_user.id)
    if data[5] == 1:
        await callback.message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:')
        await states.UserStates.up_balance.set()

@dp.callback_query_handler(Text(startswith='verify'))
async def verify_invoice(callback: types.CallbackQuery):
    invoice_id = callback.data.split('_', maxsplit=1)[1]
    invoice_info = cp.Invoice.getinfo(invoice_id)
    if invoice_info['state'] == 'payed':
        db.add_balance(callback.from_user.id, invoice_info['amount'])
        await callback.message.edit_text('<b>‚úÖ –°—á–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>')
    else:
        await callback.answer('‚ùå –°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω')

@dp.callback_query_handler(Text(startswith='accept_'))
async def accept_cmd(callback: types.CallbackQuery):
    data = db.stats(callback.from_user.id)
    if data[5] == 1:
        await callback.message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        authenticator = callback.data.split('_', maxsplit=1)[1]
        data = db.stats(callback.from_user.id)
        if data[2] < price:
            await callback.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        else:
            try:
                db.minus_balance(callback.from_user.id, price)
                db.add_order(callback.from_user.id, callback.from_user.username, f'https://www.youtube.com/watch?v={authenticator}')
                db.set_all_money(callback.from_user.id, price)
                db.set_all_orders(callback.from_user.id)
                for i in db.workers():
                    await bot.send_message(i[0], '<b>üîî –ü—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –Ω–∞ –Ω–∞–∫—Ä—É—Ç–∫—É!</b>\n–°–∫–æ—Ä–µ–µ –∏–¥–∏ –∫—Ä—É—Ç–∏—Ç—å!')
                await callback.message.edit_text('<b>‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–∞–∫—Ä—É—Ç–∫—É</b>')
            except sqlite3.IntegrityError:
                db.add_balance(callback.from_user.id, price)
                await callback.message.edit_text('‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n'
                                             '–í–µ—Ä–æ—è—Ç–Ω–æ, –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ –Ω–∞ –Ω–∞–∫—Ä—É—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ.')

@dp.callback_query_handler(lambda c: c.data == 'decline')
async def decline_cmd(callback: types.CallbackQuery):
    data = db.stats(callback.from_user.id)
    if data[5] == 1:
        await callback.message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        data = db.stats(callback.from_user.id)
        await callback.message.edit_text('<b>‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>')
        await callback.message.answer(f'üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n'
                                     f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                     f'üîë ID: {callback.from_user.id}\n'
                                     f'üë§ –õ–æ–≥–∏–Ω: @{callback.from_user.username}\n\n'
                                     f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                     f'üí≥ –ë–∞–ª–∞–Ω—Å: {data[2]} —Ä—É–±\n'
                                     f'üíµ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—É–º–º—É: {data[3]} —Ä—É–±\n'
                                     f'üéÅ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {data[4]} —à—Ç.', reply_markup=profile_inline)

@dp.message_handler(commands=['promo'])
async def promo(message: types.Message):
    try:
        promo = message.text.split(' ')[1]
        data = db.get_promo(promo)
        promo_db = data[0]
        if promo == promo_db:
            if data[2] != 0:
                db.add_balance(message.from_user.id, data[1])
                db.minus_activ(promo_db)
                await message.answer('<b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>')
            else:
                db.delete_promo(promo)
    except IndexError:
        await message.answer('–í—ã –Ω–µ –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /promo *–ø—Ä–æ–º–æ–∫–æ–¥*')
    except TypeError:
        await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!')





